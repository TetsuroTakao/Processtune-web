<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>.NET Core &#8211; Processtune Blog</title>
	<atom:link href="https://blog.processtune.com/category/winui/net-core/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.processtune.com/</link>
	<description>Articles offered from Microsoft MVP</description>
	<lastBuildDate>Tue, 28 Mar 2023 02:29:03 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.8.2</generator>

<image>
	<url>/wp-content/uploads/2023/03/cropped-Presentation-32x32.png</url>
	<title>.NET Core &#8211; Processtune Blog</title>
	<link>https://blog.processtune.com/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>.NET Core Options pattern</title>
		<link>https://blog.processtune.com/2022/08/18/net-core-options-pattern/</link>
					<comments>https://blog.processtune.com/2022/08/18/net-core-options-pattern/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Thu, 18 Aug 2022 10:44:28 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<category><![CDATA[WPF App]]></category>
		<category><![CDATA[未分類]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6428</guid>

					<description><![CDATA[The Options Pattern can build a hierarchical settings values structure. In the previous article [ASP .NET Core Options Pattern], a settings values of The .NET Generic Host that created by the host builder were registered to the host as a service as it is, and were used in the UI layer although, the Options Pattern [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"="">The Options Pattern can build a hierarchical settings values structure. In the previous article [<a href="https://blog.processtune.com/?p=6364" target="_new" style="font-weight:bold;" rel="noopener">ASP .NET Core Options Pattern</a>], a settings values of The .NET Generic Host that created by the host builder were registered to the host as a service as it is, and were used in the UI layer although, the Options Pattern in .NET Core must be applied the Options Pattern as the configuration service before registered to the host.<br />
In the WPF application, customizing startup flow at the App.xaml.cs can apply the Options pattern to the service before the MainWindow showed.</p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/GenericHostWPF" target="_new" style="font-weight:bold;" rel="noopener">.NET Core WPF application that uses the Options Pattern as configuration service registered in The .NET Generic Host.</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Development steps for .NET Core Options Pattern</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">[Step 1] The .NET Generic Host built with the host builder can be used for both web applications and desktop native applications, so settings values as configuration service that applies the Options Pattern is able to use on each screen with using the Generic Host that define in the constructor of the App class.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/08/developmentSteps.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">[Step 2] On each screen, the configuration service that the Options Pattern is applied is able to use in the constructor of the screen. This mechanism is the same as when passing the settings values as configuration service that is applied the Options Pattern to the constructor of the controller in the ASP.NET Core Options Pattern, so this article means also recap of the ASP.NET Core Options Pattern.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The App class has to service the configuration service with the Options Pattern applied before calling the MainWindow class, so stop calling the MainWindow.xaml in the App.xaml and call MainWindow after building the configuration service in the App.xaml.cs will do so.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">[Step 3] Define a startup method name to the Startup attribute in App.xaml, and create the Startup method in App.xaml.cs, then show the MainWindow screen in the Startup method. The MainWindow screen is registered as a service when the host is constructed, and the MainWindow service is displayed in the Startup method.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">This article explains this flow.</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・ASP.NET Core Options Pattern recap</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the case of Program.cs of ASP.NET Core, the settings values of the JSON file is able to specify as configurations of the host. So it can register to the Generic Host as the configuration service directly. In the case of WPF, this creation of host builder to read JSON file part is a little troublesome.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/08/asp.netCoreOptionsPatternRecap.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">First, for the JSON that was automatically loaded by the Generic Host in ASP.NET Core must be loaded explicitly, since files other than JSON can also be handled, please refer to the official document [<a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/configuration-providers?WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">Configuration providers in .NET</a>] also.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Another thing is that the application startup flow is customized and insert the service registration process before show the MainWindow. Let&#8217;s go into a little more detail.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The Generic Host in ASP.NET Core was defined in Program.cs, on the other hand, in the case of the WFP application is defined in App.xaml.cs.<br />
There are two steps to registering the Generic Host configuration as a service.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Use the &#8216;Microsoft.Extensions.Hosting&#8217; namespace, loading a JSON file into the Generic Host configuration using the &#8216;ConfigureAppConfiguration&#8217; method of the Generic Host is the one, and another, registering  the Generic Host configuration as a service using &#8216;ConfigureServices&#8217; method of the Generic Host.<br />
As for the flow of processing, use the &#8216;Microsoft.Extensions.Hosting&#8217; namespace, clear the source of the configuration of the host obtained by the &#8216;ConfigureAppConfiguration&#8217; method of the Generic Host, and load the appsettings.json file.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">the &#8216;optional&#8217; argument is a flag for appsettings.json reading, and if &#8216;true&#8217; is specified, it will work even if there is no file.<br />
the &#8216;reloadOnChange&#8217; argument is &#8216;true&#8217; and reloads appsettings.json when it changes.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The configuration constructed in this way can be obtained with the &#8216;Configuration&#8217; property of the &#8216;context&#8217; argument in the ConfigureServices&#8217; method of the host, so register it as a configuration service to the &#8216;services&#8217; argument that was also obtained.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Use the &#8216;Microsoft.Extensions.DependencyInjection&#8217; namespace, the Options Pattern is able to use while the type specification of the &#8216;Configure&#8217; method of the service of the host that can be received by the &#8216;ConfigureServices&#8217; method of the host. This mechanism is the &#8216;IOptions&#8217; interface of the &#8216;TOptions&#8217; type of the configuration service provides Dependency Injection feature to insert customised type into the configuration service. In the time, specifying the type of the ApplicationContext class that has the same structure as the JSON file.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">App.xaml.cs
    public partial class App : Application
    {
        private IHost _host;
        public App()
        {
            _host = Host.CreateDefaultBuilder()
                .ConfigureAppConfiguration((hostingContext, configuration) =&gt;
                {
                    configuration.Sources.Clear();
                    IHostEnvironment env = hostingContext.HostingEnvironment;
                    configuration
                        .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                        .AddJsonFile($"appsettings.{env.EnvironmentName}.json", true, true);
                })
                .ConfigureServices((context, services) =&gt;
                {
                    services.Configure&lt;ApplicationContext&gt;(context.Configuration);
                    services.AddSingleton&lt;MainWindow&gt;();
                    // services.AddTransient&lt;MainWindow&gt;();
                })
                .Build();
        }
</pre>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ Application lyfecycle</div>
<p>The &#8216;AddSingleton&#8217; method of services of the Generic Host and the &#8216;AddTransient&#8217; method( commented) controls lyfecycle of the service.<br />
<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?WT.mc_id=DT-MVP-4029060&amp;view=aspnetcore-6.0#lifetime-and-registration-options" target="_new" style="font-weight:bold;" rel="noopener">The section [Lifetime and registration options] of Microsoft official document [Dependency Injection in ASP.NET Core]</a> introduces how to validate &#8216;AddTransient&#8217;, &#8216;AddScoped&#8217;, and &#8216;AddSingleton&#8217; method with an operation ID attached to the service instance.<br />
The &#8216;AddTransient&#8217; method adds a unique instance per session, the &#8216;AddScoped&#8217; method adds a per-request instance, and the &#8216;AddSingleton&#8217; method adds an application-unique service instance to the application host.<br />
In this time, the &#8216;MainWindow&#8217; service uses an instance unique to the application, but the data context and configuration service described later have a strong dependency on MainWindow, so use AddTransient when serving multiple users.</p>
</div>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Customize startup flow</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The flow up to MainWindow display can be customized by defining App.xaml and App.xaml.cs.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In App.xaml, remove the &#8216;StartupUri&#8217; attribute and specify the method name that operates at startup to the &#8216;Startup&#8217; attriute. In this example, it is &#8216;Application_Startup&#8217;, so the &#8216;Application_Startup&#8217; method create in the &#8216;App.xaml.cs&#8217; file later.  The &#8216;Application_Exit&#8217; method as the application exit method at the time of termination also create in the &#8216;App.xaml.cs&#8217; file.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Next, in order to display the &#8216;MainWindow&#8217; screen in the &#8216;Application_Startup&#8217; method of App.xaml.cs, register the &#8216;MainWindow&#8217; class as the host service in advance.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;MainWindow&#8217; class registered as a service in the host can be obtained as one of the services of host that are holded in the &#8216;_host&#8217; variable of the App class global scope in App.xaml.cs.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8220;GetRequiredService&#8221; method returns InvalidOperationException (if there is no service) or ObjectDisposedException (if the service has been destroyed), unlike &#8220;GetService&#8221; which returns null in an exception, so support flow can set in subsequent processing. Used when such operations are expected. At that time, it is the scope of the service that must be considered that described above (refer to [Application lyfecycle]).</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the &#8216;Application_Startup&#8217; method, the MainWindow screen is displayed by the &#8220;Show&#8221; method of the service that is obtained from the &#8216;GetRequiredService&#8217; method of the &#8216;_host&#8217; variable.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">App.xaml.cs
        private async void Application_Startup(object sender, StartupEventArgs e)
        {
            await _host.StartAsync();
            _host.Services.GetRequiredService<mainwindow>().Show();
        }

        private async void Application_Exit(object sender, ExitEventArgs e)
        {
            await _host.StopAsync(TimeSpan.FromSeconds(5));
            _host.Dispose();
        }
</mainwindow></pre>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Use settings values as the Options Pattern</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">To confirm startup flow, start Visual Studio Code in any folder and display the terminal with CTRL + @.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Create a project with &#8216;dotnet new wpf&#8217; command in the terminal.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">To install each extension of Microsoft.Extensions.Hosting, Microsoft.Extensions.Configuration and Microsoft.Extensions.DependencyInjection from Nuget, copy .NET CLI command below and paste it into the terminal.</p>
<div style="margin: 0px 0px 0px 20px;display:table;width:80%;">
<div style="display:table-row;">
<div style="display:table-cell;font-weight:bold;white-space: nowrap;padding-right:10px;">Microsoft.Extensions.Hosting</div>
<div style="display:table-cell;">https://www.nuget.org/packages/Microsoft.Extensions.Hosting/</div>
</div>
<div style="display:table-row;">
<div style="display:table-cell;font-weight:bold;white-space: nowrap;">Microsoft.Extensions.Configuration</div>
<div style="display:table-cell;">https://www.nuget.org/packages/Microsoft.Extensions.Configuration/</div>
</div>
<div style="display:table-row;">
<div style="display:table-cell;font-weight:bold;white-space: nowrap;">Microsoft.Extensions.DependencyInjection</div>
<div style="display:table-cell;">https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/</div>
</div>
</div>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The setting values ​​can use in all of methods of MainWindow.xaml.cs, because the configuration service of the host is stored into the variable of the global scope of the MainWindow class at the constructor of the class in this sample. Although, for convenience of explanation, every statement is defined in the constructor.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Thus that it can be used later for clicks, mouseovers, select list selections, etc. if it needs.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this article, we want to complete everything in the constructor, so binding using INotifyPropertyChanged is performed, but before explaining the ViewModel, explains the structure of using service of the host first.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Set the data context in MainWindow.xaml. Here we are using a class named &#8216;MainWindowViewModel&#8217;. Since the data context specification on the xaml side is set to Window, the property is bound as it is. Application works without the attribute &#8220;UpdateSourceTrigger=PropertyChanged&#8221;. If the data context inherits from INotifyPropertyChanged, the PropertyChangedEventHandler&#8217;s delegate is executed by default.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">MainWindow.xaml
&lt;Window x:Class="GenericHostWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:GenericHostWPF"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"&gt;
    &lt;Window.DataContext&gt;
        &lt;local:MainWindowViewModel /&gt;
    &lt;/Window.DataContext&gt;
    &lt;Grid&gt;
        &lt;TextBlock x:Name="Message" Margin="10,10,500,0" TextWrapping="Wrap" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}"
            VerticalAlignment="Top"/&gt;
        &lt;TextBox x:Name="MessageArea" HorizontalAlignment="Left" Height="312" Margin="12,100,12,12" TextWrapping="Wrap" Text="{Binding Log}"
            VerticalAlignment="Top" Width="773" Background="Black" Foreground="White"/&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Store this in the global scope variable &#8216;datacontext&#8217; of the class in the constructor of MainWindow.xaml.cs and put the setting value into the property of this view model.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">For the setting value, bind the Japanese section of the &#8216;config&#8217; argument obtained in the constructor to the global scope variable &#8216;applicationContext&#8217; so that it can be used in other methods.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;applicationContext&#8217; variable provides layered properties using the property &#8216;Brand&#8217; or the &#8216;Title&#8217; property of each &#8216;Page&#8217; object and so on.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">MainWindow.xaml.cs
    public partial class MainWindow : Window
    {
        private MainWindowViewModel dataContext = new ();
        private ApplicationContext applicationContext = new();
        private IConfiguration configRoot;
        public MainWindow(IConfiguration config)
        {
            configRoot = config;
            InitializeComponent();
            config.GetSection(ApplicationContext.English).Bind(applicationContext);
            dataContext = (MainWindowViewModel)this.DataContext;
            dataContext.Message = applicationContext.Brand;
            dataContext.Log = applicationContext.Pages.First().Title;
        }
    }
</pre>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ INotification in a ViewModel</div>
<div style="display:inline-block;width:50%;vertical-align:middle;"><img decoding="async" src="/wp-content/uploads/2022/08/viewmodel.png" alt="" style="width:450px;margin-top:10px;"></div>
<div style="display:inline-block;width:40%;mergin-left:10px;">On the ViewModel side, extend INotifyPropertyChanged to declare a delegate for PropertyChangedEventHandler and define the delegate&#8217;s methods. Since the &#8216;CallerMemberName&#8217; attribute is used in the method, the &#8216;System.Runtime.CompilerServices&#8217; namespace is used.<br />
Each property stores a value in a private variable and takes it out. If the value is the same, do nothing and call the delegate&#8217;s method if there is a change.</div>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2022/08/18/net-core-options-pattern/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASP.NET Core Options Pattern</title>
		<link>https://blog.processtune.com/2022/06/28/asp-net-core-options-pattern/</link>
					<comments>https://blog.processtune.com/2022/06/28/asp-net-core-options-pattern/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Tue, 28 Jun 2022 07:43:10 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Service]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6364</guid>

					<description><![CDATA[A typical web application separates setting from the App. In the ASP .NET Core web app allows encapsulation and separation of an interest of setting using the options pattern. It allows enables continuous integration while improving maintainability of an application. This article describes as an introduce of the ASP.NET Core Options Pattern using globalization sample. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"="">A typical web application separates setting from the App. In the ASP .NET Core web app allows encapsulation and separation of an interest of setting using the options pattern. It allows enables continuous integration while improving maintainability of an application.<br />
This article describes as an introduce of the ASP.NET Core Options Pattern using globalization sample.<br />
For globalization of ASP .NET Core samples using &#8216;.resx&#8217; files are <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization?view=aspnetcore-6.0&amp;WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">ideal pattern</a>. These samples are created, edited, debugged, and continuously managed in Visual Studio, so users who aren&#8217;t using Visual Studio can use tools such as the online xml converter to get &#8216;.resx&#8217; files.<br />
If your development environment for productions that support many languages, I recommend that you do so, but if you create an application that supports a few languages such as just only Japanese and English, or lightweight web application such as PoC, demo or sample code. These apps globalize only few words, so It is useful that globalization using the options pattern without adopting full-scale globalization using &#8216;.resx&#8217; files.</p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/GlobalizationUseSettings" target="_new" style="font-weight:bold;" rel="noopener">Code sample of this article</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Overview</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The way of separating ASP.NET settings from app hasn&#8217;t changed with the way of existing. Each method can use defined the setting value in the JSON file after registering the service on the host of the application.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the case of ASP.NET MVC, if you register the service of the setting value in the host created by CreateBuilder, you can store the service received by the constructor of the controller in the variable defined globally in the scope of the controller, so can use settings variable in POST or GET method. You can use that variable in the processing of the request.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">[Program.cs]
builder.Services.Configure&lt;ApplicationContext&gt;(builder.Configuration);

[Pages/Search.cshtml.cs]
    public class SearchModel : PageModel
    {
        private readonly ApplicationContext Context;
        public SearchModel(ILogger&lt;IndexModel&gt; logger, IConfiguration configuration)
        {
            Context = new ApplicationContext();
            Context.Languages.Add(ApplicationContext.English);
            configuration.GetSection(ApplicationContext.Japanese).Bind(Context);
       }

        public void OnGet()
        {
            ViewData["Message"] = Context.Languages.Count;
...
        }
    }
</pre>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ As additional information</div>
<p>At that time, if the setting values ​​are separated using the options pattern, maintainable encapsulation can be performed. You can encapsulate by below.<br />
1. The settings for individual methods or controllers, respectively.<br />
2. At the level of &#8220;system&#8221; and &#8220;business&#8221; information such as logs and IP whitelists.<br />
3. Semantics of settings.<br />
4. more &#8230;</p>
</div>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Often In the Domain Driven Design, the same thing is called by deferent name depending on boundary context on the scene in which it is used. When you purchase some product, what is displayed as &#8220;payment&#8221; in the member&#8217;s app is displayed as &#8220;sales&#8221; in the sales management system. It is OK that use deferent letteral objects on each individual systems if it mapped deferent labels by an individual system of a legacy system. It is important that using deferent settings value to handle same object of stateful middleware on deferent service in a modern system.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Thus, it can be said that the value of the settings handled in each boundary context with several same attributes are different when design settings elements.</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Implementation</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this article, the reason of using an implementation example of globalization is for describing the example of &#8220;Continuous integration of applications that read different setting values ​​while having the same attributes&#8221; to express the features of the options pattern.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/06/StepsOfTakingConfiguration.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this article, the reason of using an implementation example of globalization is for describing the example of &#8220;Continuous integration of applications that read different setting values ​​while having the same attributes&#8221; to express the features of the options pattern.</p>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;text-indent:1em;"><span style="font-size:2rem;font-family: 'Arial';">At first</span>, prepare Japanese and English sections in the appsettings.json, and it has brand name and the Pages segment. The segment has an action names as the ActionKey and a page titles as the Title.</div>
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/Appsettings.png" alt="" style="width:180px;vertical-align:top;mergin left:10px;"></div>
</div>
</div>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/ApplicationContext.png" alt="" style="width:450px;vertical-align:top;margin-right:10px;"></div>
<div style="display:table-cell;text-indent:1em;margin-left:10px;"><span style="font-size:2rem;font-family: 'Arial';">Next</span>, prepare a class with the same structure as the JSON file used for the configuration service registration for application builder.<br />
Add the ApplicationContext.cs to the project, I recommend that adding the Models folder in the project at first, then input the ApplicationContext.cs into it.<br />
One of the features of the ASP.NET options pattern is that defined const is name of the object and ignore it as structure of the object. Thus, this const can be used when get certain section of configuration service without hard coding &#8216;Japanese&#8217; or &#8216;English&#8217;.</div>
</div>
</div>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;text-indent:1em;"><span style="font-size:2rem;font-family: 'Arial';">Then</span>, Register target section of the builder configuration as the configuration service with the type same as certain section of appsettings.json.</div>
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/RegisterService.png" alt="" style="width:450px;vertical-align:top;mergin left:10px;"></div>
</div>
</div>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/UsingConfigurationService.png" alt="" style="width:450px;vertical-align:top;margin-right:10px;"></div>
<div style="display:table-cell;text-indent:1em;"><span style="font-size:2rem;font-family: 'Arial';">Since</span> the setting value registered as configuration service can be received by the argument of the constructor, store it in a variable at the global level scope of the class. It can use in individual method of the class, respectively.</div>
</div>
</div>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ As additional information</div>
<p>I&#8217;m using the ViewData object because I needed to layer the objects when separating the options pattern. When using the options pattern as a mere encapsulation, the ViewBag object may be sufficient, as it is a set of parallel key / value combinations without grouped hierarchies.</p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2022/06/28/asp-net-core-options-pattern/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Blazor WASM aquires SVG images that will be colored by JavaScript later</title>
		<link>https://blog.processtune.com/2021/10/01/blazor-wasm-aquires-svg-images-that-will-be-colored-by-javascript-later/</link>
					<comments>https://blog.processtune.com/2021/10/01/blazor-wasm-aquires-svg-images-that-will-be-colored-by-javascript-later/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Fri, 01 Oct 2021 09:33:03 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6162</guid>

					<description><![CDATA[Blazor WebAssembly provides JavaScript glue code for WebAssembly that is common web architecture. Blazor aims to provide almost of all features of .NET Core to modern web browser, So JavaScript glue code of Blazor webassembly can interoperate with JavaScript ecosystem that is used in exsisting usage. This article describes the Blazor provides WebAssembly and Blazor [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin: 0px 0px 0px 0px; color: #000044; font-size: 0.9rem;">Blazor WebAssembly provides JavaScript glue code for WebAssembly that is <a style="font-weight: bold;" href="https://caniuse.com/wasm" target="_new" rel="noopener">common web architecture</a>.<br />
Blazor aims to provide almost of all features of .NET Core to modern web browser, So JavaScript glue code of Blazor webassembly can interoperate with JavaScript ecosystem that is used in exsisting usage.<br />
This article describes the Blazor provides WebAssembly and Blazor WebAssembly calls JavaScript method, it is sample as leverage <a style="font-weight: bold;" href="https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-6.0?WT.mc_id=DT-MVP-4029060" target="_new" rel="noopener">the Razor syntax template</a> writing that provides high productivity, and reusing JavaScript ecosystem. As addition, the Blazor webassembly acquires some icons from external web app by browser of local.<br />
In next article [<a style="font-weight: bold;" href="https://blog.processtune.com/?p=6189" target="_new" rel="noopener">JavaScript colors SVG images that are acquired by Blazor WebAssembly</a>], these icons rendered by the Razor template then JavaScript colors them.</p>
<p style="margin: 10px 0px 0px 5px; text-indent: 1em; text-align: right; font-weight: bold;">&gt;&gt;<a style="font-weight: bold;" href="https://github.com/TetsuroTakao/SVGIconColoring_en_1" target="_new" rel="noopener">Blazor webassembly sample project of this article</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Create Blazor Webassembly project</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">.NET framework provides many templates variety for creation of apps, there are several kind of web apps, native apps and so on. it is also provided for Blazor WebAssembly and it has host type and stand alone type (as default).</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">The [dotnet new &#8211;list] command shows all of templates and the [dotnet new blazorwasm -h] shows parameters of Blazor WebAssembly. So put the command [dotnet new blazorwasm] create base files of Blazor WebAssembly project that is not hosted by Blazor server. Blazor server provides progressive web apps feature.</p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 900px;" src="/wp-content/uploads/2022/03/dotnetNewList.png" alt="" /></p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 900px;" src="/wp-content/uploads/2022/03/dotnetnewblazorwasmhost.png" alt="" /></p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 900px;" src="/wp-content/uploads/2022/03/dotnetnewblazorwasm.png" alt="" /></p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">The directory of created project includes many files. There is the [Program.cs] file as application entrypoint, and the [App.razor] file as routing deefinition.</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">HTTP request is tranfer from the [App.razor] file to the [Shared\MainLayout.razor] file then the [Shared\MainLayout.razor] makes output that combines the [Shared\NavMenu.razor] file with requested ([/] : as root) page of the [Pages] folder.</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">The page files of the [Pages] folder has <a style="font-weight: bold;" href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/prerendering-and-integration?view=aspnetcore-6.0&amp;pivots=server#use-routable-components-in-a-razor-pages-app?WT.mc_id=DT-MVP-4029060" target="_new" rel="noopener">the [@page] directive</a>. It is routing mechanizm of Razor syntax.</p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">@page "/"

&lt;PageTitle&gt;Index&lt;/PageTitle&gt;

&lt;h1&gt;Hello, world!&lt;/h1&gt;

Welcome to your new app.

&lt;SurveyPrompt Title="How is Blazor working for you?" /&gt;
</pre>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">At first as one fifths, put command [dotnet run] in the [Integrated terminal] (put the [ctrl] key + the [@] key for show the [Integrated terminal] : to confirm shortcut key on your keybord type, show shortcut key list using the [ctrl] key + the [k] key + the [s] key) . When the result output after compile, put the [ctrl] key + click the link (http://localhost:5078/ for below figure) to launch browser with display index page content.</p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/dotnetrun.png" alt="" /><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/helloworld.png" alt="" /></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Acquiring SVG images from external web</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">As next : two fifths step, create temporaly contents as whole structure at the [Index.razor] file. Create some content in case of that some value is null ([&lt;p&gt;&lt;em&gt;Loading&#8230;&lt;/em&gt;&lt;/p&gt;] for below figure), and create some content when some value is not null.</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">Prepare the [SVGIcon] object for SVG image. Use the [MarkupString] type to a property that is used for output string for HTML. The [image] tag of HTML has the [src] attribute that is able to accept inline SVG.</p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/structuresource.png" alt="" /><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/structureview.png" alt="" /></p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">Three fifths step, acquire one svg file from external web site [Icon Fonts], and display it. Modify only in the [@code] statements.</p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/OneSVGSource.png" alt="" /><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/OneSVGView.png" alt="" /></p>
<div style="background-color: #cccccc; border: 1px solid #00000; padding: 10px 10px 0px 10px; margin-top: 20px;">
<div style="margin: -20px 0px 0px 5px; text-indent: 1em; font-weight: bold; background-color: #444; border: 1px solid #ccc; color: #fff;"><img src="https://s.w.org/images/core/emoji/16.0.1/72x72/269c.png" alt="⚜" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Code</div>
<p><span style="font-weight: bold;">for HTML</span> (same as temporaly contents as whole structure above)</p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">&lt;h1&gt;List of the [Icon Fonts]&lt;/h1&gt;
&lt;div&gt;Icon made from &lt;a href="http://www.onlinewebfonts.com/icon"  target="new"&gt;Icon Fonts&lt;/a&gt; is licensed by CC BY 3.0&lt;/div&gt;
@if (SVGs.URL == null)
{
    &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else
{
    &lt;div style="display:inline-block;"&gt;
        &lt;img id="@SVGs.URL" src='@SVGs.imgSrc' style="width:100px;" onclick="selectImg(this)"&gt;
    &lt;/div&gt;
}
</pre>
<p><span style="font-weight: bold;">for Code</span></p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">    private SVGIcon SVGs = new SVGIcon();
    protected override async Task OnInitializedAsync()
    {
        HttpClient httpClient = new HttpClient();
        Uri requestURL = new Uri("http://cdn.onlinewebfonts.com/svg/download_155117.svg");
        var res = await httpClient.GetStringAsync(requestURL);
        if (string.IsNullOrEmpty(res))
        {
            @* some code *@
        }
        else
        {
            var xml = new System.Xml.XmlDocument();
            xml.LoadXml(res);
            var content = "";
            if(xml.LastChild != null){
                content = xml.LastChild.OuterXml;
            }
            SVGs = new SVGIcon()
            {
                URL="http://cdn.onlinewebfonts.com/svg/download_155117.svg",
                XML= new MarkupString(content)
            };
        }
    }
</pre>
<p>[describe]<br />
Use the [<span style="font-weight: bold;">OnInitializedAsync</span>] task to run code when HTML on loading.</p>
</div>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">The step of four fifths, modify the [OnInitializedAsync] that is task to run code when HTML on loading. Change feature that acquires one SVG file to acquire ten SVG files as sampling. So change the [SVGs] variable from single object to the List objects.</p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">    private SVGIcon SVGs = new SVGIcon();

    to

    private List SVGs = new List();
</pre>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">Since change the [SVGs] variable to the List objects, HTML part also change to render List objects.</p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">@if (SVGs.URL == null)
{
    &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else
{
    &lt;div style="display:inline-block;"&gt;
        &lt;img id="@SVGs.URL" src='@SVGs.imgSrc' style="width:100px;" onclick="selectImg(this)"&gt;
    &lt;/div&gt;
}

    to

@if (SVGs.FirstOrDefault() == null)
{
    &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else
{
    @foreach (var svg in SVGs)
    {
        &lt;div style="display:inline-block;"&gt;
            &lt;img id="@svg.URL" src='@svg.imgSrc' style="width:100px;" onclick="selectImg(this)"&gt;
        &lt;/div&gt;
    }
}

[describe]
The [SVGs.FirstOrDefault()] statement is return null when the [SVGs] variable items count is zero, on otherhand the [SVGs.First()] statement
return the [InvalidOperationException] type exception.
If create exception handler that corresponds all exceptions, it is better use this [System.Linq.Enumerable.First Method].
</pre>
<p style="margin: 10px 0px 0px 5px; text-indent: 1em; text-align: right; font-weight: bold;">&gt;&gt;<a style="font-weight: bold;" href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first?view=net-6.0?WT.mc_id=DT-MVP-4029060" target="_new" rel="noopener">System.Linq.Enumerable.First Method</a></p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/ListingSVGsCode.png" alt="" /><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/ListingSVGsView.png" alt="" /></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Call JavaScript from Blazor WebAssembly</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">Five fifths step is modifing the [wwwroot/index.html] file because JavaScript has to define in HTML file. However, this contents is vavigated by the [Shared/MainLayout.razor] file and includes the [Pages/Index.razor] component. So add the [SignIn] part on the [Shared/MainLayout.razor] file as simple procedures of calling JavaScript from Blazor. The Blazor method [SignIn()] is called use injected razor syntax of HTML [A] tag (&lt;a href=&#8221;#&#8221; @onclick=&#8221;SignIn&#8221;&gt;@SignedText&lt;/a&gt;), then the Blazor method [SignIn()] calls the JavaSript method [SetSignInText] as implimentation of the [<a style="font-weight: bold;" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.jsinterop.ijsruntime?view=aspnetcore-6.0?WT.mc_id=DT-MVP-4029060" target="_new" rel="noopener">IJSRuntime</a>] Interface.</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">The below code is whole of the [Shared/MainLayout.razor] file.</p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">@inherits LayoutComponentBase
@inject IJSRuntime JS

&lt;div class="page"&gt;
    &lt;div class="sidebar"&gt;
        &lt;NavMenu /&gt;
    &lt;/div&gt;

    &lt;main&gt;
        &lt;div class="top-row px-4"&gt;
            &lt;a href="#" @onclick="SignIn"&gt;@SignedText&lt;/a&gt;
            &lt;span&gt;　| &lt;/span&gt;
            &lt;a href="https://docs.microsoft.com/aspnet/" target="_blank"&gt;About&lt;/a&gt;
        &lt;/div&gt;

        &lt;article class="content px-4"&gt;
            @Body
        &lt;/article&gt;
    &lt;/main&gt;
&lt;/div&gt;

@code{
    public MarkupString SignedText { get; set; } = (MarkupString)"&lt;span style='color:#ff0000'&gt;SignIn&lt;/span&gt;";
    public async Task SignIn()
    {
        SignedText = new (await JS.InvokeAsync("SetSignInText"));
    }
}

[describe]
It's important that define the [@inject IJSRuntime JS] statement at head part of the [Shared/MainLayout.razor] file.
As addition, implementation of the [IJSRuntime] interface is asyncronise, so the task define as async and await calling the [SetSignInText] JavaScript
method. The [IJSRuntime] interface has also the [InvokeVoidAsync] method, thus if JavaSctipt returns some value, use the [InvokeAsync] method.
These methods create an instance of ValueTask value type that is able to convert to Task reference type. So it is good that await a method returns value
type, then construct new the MarkupString using it.
</pre>
<div style="background-color: #cccccc; border: 1px solid #00000; padding: 10px 10px 0px 10px; margin-top: 20px;">
<div style="margin: -20px 0px 0px 5px; text-indent: 1em; font-weight: bold; background-color: #444; border: 1px solid #ccc; color: #fff;">ⓘ As additional information</div>
<p>If the <a style="font-weight: bold;" href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1?view=net-6.0?WT.mc_id=DT-MVP-4029060" target="_new" rel="noopener">ValueTask</a> value type is awaited, the instanse of Task reference type is executed, it is onetime. This mechanism effects to decleasing number of instance allocating times.<br />
A reference type needs explicit instancing, and await end of instancing, furthermore, await end of processing that throw value of the processing to Blazor object. Long time and external processting of reference type task as await ansyncronously needs instancing a struct that has multiple fields.</p>
</div>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">The [SetSignInText] JavaScript has to defines as HTML, so it is good which on the [Shared/MainLayout.razor] file or on the [wwwroot/index.html] file (excludes the [Pages/Index.razor] file). If the reason is that it is share function for all pages, so define on the [Shared/MainLayout.razor] file. Or the reason is that want to bunch JavaScript functions at head of HTML file, define on the [Pages/Index.razor] file.</p>
<p style="margin: 0px 0px 0px 0px; text-indent: 1em;">In this article, JavaScript functions are defined on the [wwwroot/index.html] file.</p>
<pre style="background-color: #cccccc; color: #444; border: 1px solid #00000; padding: 10px;">    &lt;script&gt;
        window.SetSignInText = () =&gt;{
            var res = prompt("Please put login name.");
            if(res == null){
                res="&lt;span style='color:#ff0000'&gt;SignIn&lt;/span&gt;";
            }
            return res;
        }
    &lt;/script&gt;

[describe]
Though this code sample is dummy code of JavaScript that it does not login really, it is able to confirm that Blazor calls JavaScript method real.
And can confirm that Blazor can await JavaScript method and acquire string that JavaScript object take and transfer.
</pre>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/SigninCode.png" alt="" /><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/SigninView.png" alt="" /></p>
<div style="background-color: #cccccc; border: 1px solid #00000; padding: 10px 10px 0px 10px; margin-top: 20px;">
<div style="margin: -20px 0px 0px 5px; text-indent: 1em; font-weight: bold; background-color: #444; border: 1px solid #ccc; color: #fff;">ⓘ As additional information</div>
<p>If want to save the project until so far of this article to GitHub temporarily, create gitignore file use .NET template, and initialise git repository use the [Integrated terminal] of Visual Studio Code.<br />
Put [dotnet new gitignore] command in the [Integrated terminal] to create gitignore file, and Put [git init] command to initialise git repository.</p>
<p style="display: inline-block; margin-bottom: 10px; text-align: center; width: 100%;"><img decoding="async" style="width: 450px;" src="/wp-content/uploads/2022/03/dotnetgitignore.png" alt="" /></p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2021/10/01/blazor-wasm-aquires-svg-images-that-will-be-colored-by-javascript-later/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How to set attributes of Azure Active Directory application for an app using JavaScript to authenticate users</title>
		<link>https://blog.processtune.com/2020/09/01/how-to-set-attributes-of-azure-active-directory-application-for-an-app-using-javascript-to-authenticate-users/</link>
					<comments>https://blog.processtune.com/2020/09/01/how-to-set-attributes-of-azure-active-directory-application-for-an-app-using-javascript-to-authenticate-users/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Tue, 01 Sep 2020 08:48:48 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[Azure Active Directory]]></category>
		<category><![CDATA[Microservice]]></category>
		<category><![CDATA[Microsoft Azure]]></category>
		<category><![CDATA[Microsoft Graph]]></category>
		<category><![CDATA[ReactJS.NET]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio]]></category>
		<category><![CDATA[未分類]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=5101</guid>

					<description><![CDATA[The &#8216;implicit grant type&#8217; is one of the several grant types of &#8216;The OAuth 2.0 Authorization Framework&#8216; which Azure Active Directory endpoint supports. An application requests an access token to Azure Active Directory endpoint using any grant type of the four types. The article &#8216;Create Azure Active Directory application&#8217; described the differences between the types. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"="">The &#8216;implicit grant type&#8217; is one of the several grant types of &#8216;<a href="https://tools.ietf.org/html/rfc6749" target="_new" style="font-weight:bold;" rel="noopener">The OAuth 2.0 Authorization Framework</a>&#8216; which Azure Active Directory endpoint supports.<br />
An application requests an access token to Azure Active Directory endpoint using any grant type of the four types. The article &#8216;Create Azure Active Directory application&#8217; described the differences between the types.<br />
The ‘implicit grant type’ omits a broker credentials such as an authorization code, because it is designed for accessing from JavaScript such as single page application(Henceforth called SPA).<br />
This article describes how to set attributes of the Azure Active Directory application for using &#8216;implicit grant type&#8217; to acquire token from JavaScript of a client application. Then describes how to create an application using Microsoft Authentication Library (Hereinafter referred to as &#8216;MSAL&#8217;).</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Set Azure Active Directory application to allow implicit grant flow</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The article &#8216;<a href="https://blog.processtune.com/?p=5085" target="_new" style="font-weight:bold;" rel="noopener">Create Azure Active Directory application</a>&#8216; described how to create Azure Active Directory application. And the article &#8216;<a href="https://blog.processtune.com/?p=5435" target="_new" style="font-weight:bold;" rel="noopener">Preparing to create the app using programmable authentication flow</a>&#8216; describes how to set attributes of the Azure Active Directory application for several permissions. Please refer to these articles if you need them.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">To be available implicit grant flow of Azure Active Directory application, open the Microsoft Azure portal, then select [Azure Active Directory] – [App registrations] – (select target application) – [Authentication] – &#8216;Implicit grant&#8217; section, and check [Access tokens] and [ID tokens] to on. Press [Save] button at last.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;">
<img decoding="async" src="/wp-content/uploads/2020/09/AADAppAuthenticationImplicitSettings.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">ID Token is provided by the Open ID Connect identity layer above the OAuth 2.0 protocol of authentication flow of Azure Active Directory endpoint. It is able to use to verify destination of authenticating identity if you want.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Azure Active Directory endpoint responds it as the JWT format, so you can use the following code to check.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using System.Text.Json;
using System.Linq;

public string ReadJwt(string jwt, string payloadKey = "")
{
    var result = string.Empty;
    if (jwt.Split('.').Count() != 3) return result;
    var tokenType = Base64UrlEncoder.Decode(jwt.Split('.').FirstOrDefault());
    var typeElement = new JsonElement();
    if(JsonDocument.Parse(tokenType).RootElement.TryGetProperty("typ",out typeElement))
    {
        if (typeElement.GetString() == "JWT")
        {
            var token = new JwtSecurityTokenHandler().ReadJwtToken(jwt);
            if (string.IsNullOrEmpty(payloadKey))
            {
                if (token.Payload.Iss.Contains("sts.windows.net"))
                {
                    result = "microsoft";
                }
            }
            else
            {
                result = token.Payload[payloadKey].ToString();
            }
        }
    }
    return result;
}
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">This code checks an issuer. If the value of the iss attribute is the security token service of Microsoft, it has provided by the destination that I request. It guarantees that the token is not forged, and it has attributes you expect as ID Token format Microsoft provides.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Access Token provided as JWT format that is same as ID Token. Access token( right figure below) and ID token( left figure below) is able to check a state of forgery by another process alternative of verifying JWT.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">If you set the state parameter at request timing of acquiring tokens, then check equivalent of it at timing of receive it.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;">
<img decoding="async" src="/wp-content/uploads/2020/08/tokensJWT.png" alt="" style="width:900px;"></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Create SPA</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Please read quick start of SPA at Azure portal and try it. It is super easy to run because the downloaded SPA is already sat the settings for the Azure Active Directory app of the Azure portal.</p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/msal-js-initializing-client-applications?WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">Go to official document</a></p>
<p style="display:inline-block;margin-bottom:10px;"><img decoding="async" src="/wp-content/uploads/2020/09/azurePortalQuickStart.png" alt="" style="width:300px;"><img decoding="async" src="/wp-content/uploads/2020/09/azurePortalQuickStartImplicit.png" alt="" style="width:300px;"><img decoding="async" src="/wp-content/uploads/2020/09/azurePortalQuickStartDownload.png" alt="" style="width:300px;"></p>
<p style="display:inline-block;margin-bottom:10px;"><img decoding="async" src="/wp-content/uploads/2020/09/azurePortalQuickStartNpmInstallStart.png" alt="" style="width:300px;"><img decoding="async" src="/wp-content/uploads/2020/09/azurePortalQuickStartLogin.png" alt="" style="width:300px;"><img decoding="async" src="/wp-content/uploads/2020/09/azurePortalQuickStartAppRun.png" alt="" style="width:300px;"></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2020/09/01/how-to-set-attributes-of-azure-active-directory-application-for-an-app-using-javascript-to-authenticate-users/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Change JsonConvert to JsonSerializer</title>
		<link>https://blog.processtune.com/2020/05/23/change-jsonconvert-to-jsonserializer/</link>
					<comments>https://blog.processtune.com/2020/05/23/change-jsonconvert-to-jsonserializer/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Fri, 22 May 2020 20:25:53 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[Adaptive Cards]]></category>
		<category><![CDATA[Office App]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio]]></category>
		<category><![CDATA[WinUI]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=5620</guid>

					<description><![CDATA[When using a web API, a program has to implement serialize and deserialize features in many cases. the &#8216;Newtonsoft.Json.JsonConvert.Deserialize(_json_)&#8217; and the &#8216;Newtonsoft.Json.JsonConvert.SerializeObject(_object_)&#8217; is useful so far, and if a program unknowns a json text as type, the &#8216;Newtonsoft.Json.JsonConvert.Deserialize(_json_)&#8217; and the &#8216;Newtonsoft.Json.Linq.JArray[&#8220;_propertyname_&#8221;]&#8217; is useful. Microsoft provides new docs &#8216;How to migrate from Newtonsoft.Json to System.Text.Json&#8216;. Here [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:"Segoe UI";">When using a web API, a program has to implement serialize and deserialize features in many cases.<br />
the &#8216;Newtonsoft.Json.JsonConvert.Deserialize<t>(_json_)&#8217; and the &#8216;Newtonsoft.Json.JsonConvert.SerializeObject(_object_)&#8217; is useful so far, and if a program unknowns a json text as type, the &#8216;Newtonsoft.Json.JsonConvert.Deserialize<newtonsoft.Json.Linq.JObject>(_json_)&#8217; and the &#8216;Newtonsoft.Json.Linq.JArray[&#8220;_propertyname_&#8221;]&#8217; is useful.<br />
Microsoft provides new docs &#8216;<a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to" target="_new" style="font-weight:bold;" rel="noopener">How to migrate from Newtonsoft.Json to System.Text.Json</a>&#8216;.<br />
Here this article describes how to deserialize JSON text with a type definition using System.Text.Json.JsonSerializer, and also how to deserialize unknown type JSON text. The &#8216;System.Text.Json.JsonSerializer.Serialize(_object_)&#8217; and the &#8216;System.Text.Json.JsonDocument.Parse(_json_).RootElement.GetProperty(&#8220;_propertyname_&#8221;).GetString()&#8217; are mentioned too.</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/NewtonToSystem.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/></p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/NewtonToSystem" target="_new" style="font-weight:bold;" rel="noopener">The code sample of this article</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Create WinUI App</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;"><a href="https://github.com/TetsuroTakao/NewtonToSystem" target="_new" style="font-weight:bold;" rel="noopener">The code sample of this article</a> is created as the Windows UI 3 application(Hereinafter referred to as WinUI). The WinUI 3 app is described at the Microsoft Docs article &#8216;<a href="https://docs.microsoft.com/en-us/windows/apps/winui/winui3/" target="_new" style="font-weight:bold;" rel="noopener">Windows UI Library 3.0 Preview 1 (May 2020)</a>&#8216; as setting the environment to create Windows UI app. And also the reference to the &#8216;<a href="https://github.com/microsoft/Xaml-Controls-Gallery/tree/winui3preview" target="_new" style="font-weight:bold;" rel="noopener">Xaml Controls Gallery (WinUI 3.0 Preview 1 branch)</a>&#8216; is mentioned.</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/msdocs.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">I have decided to change the &#8216;NewtonSoft&#8217; namespace provides serialization features (that I had used a long time), to System namespace at this opportunity.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The WinUI app is created from a template at first.</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/createproject.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/>
</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The below figure is the structure of the solution(left). And this article describes compared with the &#8216;Newtonsoft&#8217; namespace and the &#8216;System&#8217; namespace, thus the code sample defined a reference to the library through the NuGet(rihgt).</p>
<p style="display:inline-block;margin-bottom:10px;">
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/solutionstructure.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/> <img decoding="async" src="/wp-content/uploads/2020/05/nuget.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/>
</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Create View</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">At first, it is good to define simple title of the window and put one or two buttons at the view then run the application press F5 key, because the WinUI 3 app is still a preview that has not a design feature for Visual Studio. The figures below define the title of the window.</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/appxaml.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/> <img decoding="async" src="/wp-content/uploads/2020/05/appxamlcs.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/>
</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">If it is able to launch, continue to design complex layouts at the next.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The text box above will hold something JSON string, and the text box below will generate formatted text of the object that analyzed from JSON string above.</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/mainwindowxaml.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/>
</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">This sample is omitted visual design, actually, the WinUI 3 can implement the Fluent Design using the Fluent Design system of Windows 10. For instance, can apply shadow to the controls, can use modern controls such as the hiding scroll bars(thin bar), and can use the dark mode theme(see Microsoft Build 2020 session &#8216;<a href="https://mybuild.microsoft.com/sessions/7d5b56db-d367-43ac-9163-44de4e3919e8?source=sessions" target="_new" style="font-weight:bold;" rel="noopener">Everything you need to know about WinUI</a> 11:43 -&#8216;).</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/appexecute.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/>
</p>
<p style="margin: 0px 10px 0px 0px;text-indent:1em;">In the code behind, when the button pressed, the app will acquire the JSON string from web API through the facade. This JSON string will be put into the public property of the facade as the &#8216;original JSON string&#8217;. then in this UI thread, put it to the text property of the text box that means the &#8216;original JSON string&#8217;. As the same, the web API URL also set to the public property of the facade at now, in the future it might be able to set from out of the facade.<br />
The button sends the argument that means which namespaces will be used to deserialize the JSON string. Then acquire a formatted string as a result that will be put to the text property of the text box that means the &#8216;Formatted string&#8217;.
</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/mainwindowxamlcs.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/>
</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">On the original JSON string as a sample will acquire from the web API that is provided from an adaptive card template list. It is a good sample because it provides not a standard typed JSON string.</p>
<p style="margin: 0px 10px 0px 0px;text-indent:1em;">This JSON string contains all templates of the adaptive card, so the first layer elements of the root element have not property name. This kind type of JSON string is impossible to deserialize through prepared types. So this web API provides search features of organization information. Please refer to the Microsoft document &#8216;<a href="https://docs.microsoft.com/en-us/adaptive-cards/templating/service" target="_new" style="font-weight:bold;" rel="noopener">Adaptive Cards Template Service</a>&#8216;.
</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">
{
  "cdm": {
    "templates": [
      {
        "file": "Categories.json",
        "fullPath": "cdm/Categories.json"
      }
    ]
  },
  "finos.org": {
    "templates": [
      {
        "file": "Bond.json",
        "fullPath": "finos.org/Bond.json"
      }
    ]
  },
  "github.com": {
    "templates": [
      {
        "file": "issue_webhook.data.json",
        "fullPath": "github.com/issue_webhook.data.json"
      },
      {
        "file": "issue_webhook.json",
        "fullPath": "github.com/issue_webhook.json"
      }
    ]
  },
  ...
}
</pre>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Flow per conditions</p>
<p style="margin: 0px 10px 0px 0px;text-indent:1em;">In the facade, if the argument means using the ‘Newtonsoft’ namespace, the method deserializes the JSON string using correct namespace(in the left figure). In the case of the ‘System’ namespace, the method throws the part that picked github.com of the JSON string to the method that parses the JSON(in the right figure). Not use the ‘Newtonsoft’ namespace from now, thus it divided from the method using the ‘System’ namespace.</p>
<p style="margin: 0px 10px 0px 0px;text-indent:1em;">This type of JSON string can not deserialize through prepared type, because the property that wants to except is only one(organization name such as the &#8216;github.com&#8217; in above JSON string figure) and it can not use <a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.text.json.serialization.jsonextensiondataattribute?view=netcore-3.1" target="_new" style="font-weight:bold;" rel="noopener">the &#8216;JsonExtensionData&#8217; attribute of the &#8216;System.Text.Json.Serialization.JsonExtensionDataAttribute&#8217; class</a>(see Microsoft document &#8216;<a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to" target="_new" style="font-weight:bold;" rel="noopener">How to serialize and deserialize (marshal and unmarshal) JSON in .NET</a>&#8216;).
</p>
<p style="margin: 0px 10px 0px 0px;text-indent:1em;">In Case 3, It does not use the &#8216;CardModel&#8217; type but use the &#8216;templates&#8217; property of the &#8216;RootElement&#8217; that parse by the &#8216;JsonDocument&#8217;, because as aforementioned, a prepared type can not define using the &#8216;JsonExtensionData&#8217; attribute.
</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/facadenewton.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/> <img decoding="async" src="/wp-content/uploads/2020/05/facadesystem.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Convert from the Newtonsoft namespace to the System namespace
</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The comment &#8216;Case 1&#8217; of the &#8216;GetCard&#8217; method is converted to the comment &#8216;Case 3&#8217; of the &#8216;GetJsonString&#8217; method at the &#8216;TextController&#8217; class. These processes are sample code of using prepared type to deserialize an object.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">
// Case 1. Using the Newtonsoft namespace to parse an object as deserializing through prepared type.
var cardTemplates = JsonConvert.DeserializeObject&lt;CardModel&gt;(cards);
results.Add("Result of the Case 1.");
foreach (var t in cardTemplates.templates)
{
    results.Add(string.Format("file = [{0}], fullPath = [{1}]", t.file, t.fullPath));
}
result = string.Join(Environment.NewLine, results);

to

// Case 3. Using the System namespace to parse an object as deserializing through prepared type.
var cards = JsonDocument.Parse(json).RootElement.GetProperty("templates");
var templates = JsonSerializer.Deserialize&lt;List&lt;Template&gt;&gt;(cards.ToString());
result.Add("Result of the Case 3.");
foreach (var t in templates)
{
    result.Add(string.Format("file = [{0}], fullPath = [{1}]", t.file, t.fullPath));
}
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The type &#8216;CardModel&#8217; has the &#8216;templates&#8217; property as a list of the &#8216;Template&#8217; type. The &#8216;Template&#8217; type has the &#8216;file&#8217; property and the &#8216;fullPath&#8217; property as string type. The name of these properties can define the camel-type because these properties have the &#8216;JsonPropertyName&#8217; attribute. These attributes have to coincident with the name of the property name of the JSON string.</p>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/textcontroller.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/> <img decoding="async" src="/wp-content/uploads/2020/05/cardmodel.png" alt="" style="width:300px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In Case 3, It does not use the &#8216;CardModel&#8217; type but use the &#8216;templates&#8217; property of the &#8216;RootElement&#8217; that parse by the &#8216;JsonDocument&#8217;, because as aforementioned, a prepared type can not define using the &#8216;JsonExtensionData&#8217; attribute.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">On the other hand, instead of using a prepared type, using the &#8216;JsonElement&#8217; that created by the &#8216;EnumerateArray&#8217; method of the parsed object.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">
// Case 2. To parse an object as deserializing that through the 'JObect' of the Newtonsoft namespace.
// Use this process if you can't prepare the type of the JSON, or the type is not a complex structure.
var templates = JsonConvert.DeserializeObject&lt;JObject&gt;(cards);
var templatesArray = templates["templates"].ToArray();
results.Add("Result of the Case 2.");
foreach (var t in templatesArray)
{
    results.Add(string.Format("file = [{0}], fullPath = [{1}]", t["file"].ToString(), t["fullPath"].ToString()));
}
result = string.Join(Environment.NewLine, results);

to

// Case 4. To parse an object as deserializing that through the 'JsonDocument' of the System namespace.
// Use this process if you can't prepare the type of the JSON, or the type is not a complex structure.
result.Add("Result of the Case 4.");
foreach (var t in cards.EnumerateArray().ToList())
{
    result.Add(string.Format("file = [{0}], fullPath = [{1}]", t.GetProperty("file").GetString(), t.GetProperty("fullPath").GetString()));
}
return string.Join(Environment.NewLine,result);
</pre>
<p style="display:inline-block;margin-bottom:10px;">
<img decoding="async" src="/wp-content/uploads/2020/05/appexecuted.png" alt="" style="width:600px;box-shadow: 5px 5px 5px rgba(0,0,0,0.4);border:thin solid #ccc;"/></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2020/05/23/change-jsonconvert-to-jsonserializer/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

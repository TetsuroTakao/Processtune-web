<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>WPF App &#8211; Processtune Blog</title>
	<atom:link href="https://blog.processtune.com/category/winui/wpf-app/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.processtune.com/</link>
	<description>Articles offered from Microsoft MVP</description>
	<lastBuildDate>Mon, 27 Mar 2023 03:33:48 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.8.2</generator>

<image>
	<url>/wp-content/uploads/2023/03/cropped-Presentation-32x32.png</url>
	<title>WPF App &#8211; Processtune Blog</title>
	<link>https://blog.processtune.com/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>.NET Core Options pattern</title>
		<link>https://blog.processtune.com/2022/08/18/net-core-options-pattern/</link>
					<comments>https://blog.processtune.com/2022/08/18/net-core-options-pattern/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Thu, 18 Aug 2022 10:44:28 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<category><![CDATA[WPF App]]></category>
		<category><![CDATA[未分類]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6428</guid>

					<description><![CDATA[The Options Pattern can build a hierarchical settings values structure. In the previous article [ASP .NET Core Options Pattern], a settings values of The .NET Generic Host that created by the host builder were registered to the host as a service as it is, and were used in the UI layer although, the Options Pattern [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"="">The Options Pattern can build a hierarchical settings values structure. In the previous article [<a href="https://blog.processtune.com/?p=6364" target="_new" style="font-weight:bold;" rel="noopener">ASP .NET Core Options Pattern</a>], a settings values of The .NET Generic Host that created by the host builder were registered to the host as a service as it is, and were used in the UI layer although, the Options Pattern in .NET Core must be applied the Options Pattern as the configuration service before registered to the host.<br />
In the WPF application, customizing startup flow at the App.xaml.cs can apply the Options pattern to the service before the MainWindow showed.</p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/GenericHostWPF" target="_new" style="font-weight:bold;" rel="noopener">.NET Core WPF application that uses the Options Pattern as configuration service registered in The .NET Generic Host.</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Development steps for .NET Core Options Pattern</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">[Step 1] The .NET Generic Host built with the host builder can be used for both web applications and desktop native applications, so settings values as configuration service that applies the Options Pattern is able to use on each screen with using the Generic Host that define in the constructor of the App class.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/08/developmentSteps.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">[Step 2] On each screen, the configuration service that the Options Pattern is applied is able to use in the constructor of the screen. This mechanism is the same as when passing the settings values as configuration service that is applied the Options Pattern to the constructor of the controller in the ASP.NET Core Options Pattern, so this article means also recap of the ASP.NET Core Options Pattern.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The App class has to service the configuration service with the Options Pattern applied before calling the MainWindow class, so stop calling the MainWindow.xaml in the App.xaml and call MainWindow after building the configuration service in the App.xaml.cs will do so.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">[Step 3] Define a startup method name to the Startup attribute in App.xaml, and create the Startup method in App.xaml.cs, then show the MainWindow screen in the Startup method. The MainWindow screen is registered as a service when the host is constructed, and the MainWindow service is displayed in the Startup method.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">This article explains this flow.</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・ASP.NET Core Options Pattern recap</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the case of Program.cs of ASP.NET Core, the settings values of the JSON file is able to specify as configurations of the host. So it can register to the Generic Host as the configuration service directly. In the case of WPF, this creation of host builder to read JSON file part is a little troublesome.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/08/asp.netCoreOptionsPatternRecap.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">First, for the JSON that was automatically loaded by the Generic Host in ASP.NET Core must be loaded explicitly, since files other than JSON can also be handled, please refer to the official document [<a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/configuration-providers?WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">Configuration providers in .NET</a>] also.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Another thing is that the application startup flow is customized and insert the service registration process before show the MainWindow. Let&#8217;s go into a little more detail.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The Generic Host in ASP.NET Core was defined in Program.cs, on the other hand, in the case of the WFP application is defined in App.xaml.cs.<br />
There are two steps to registering the Generic Host configuration as a service.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Use the &#8216;Microsoft.Extensions.Hosting&#8217; namespace, loading a JSON file into the Generic Host configuration using the &#8216;ConfigureAppConfiguration&#8217; method of the Generic Host is the one, and another, registering  the Generic Host configuration as a service using &#8216;ConfigureServices&#8217; method of the Generic Host.<br />
As for the flow of processing, use the &#8216;Microsoft.Extensions.Hosting&#8217; namespace, clear the source of the configuration of the host obtained by the &#8216;ConfigureAppConfiguration&#8217; method of the Generic Host, and load the appsettings.json file.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">the &#8216;optional&#8217; argument is a flag for appsettings.json reading, and if &#8216;true&#8217; is specified, it will work even if there is no file.<br />
the &#8216;reloadOnChange&#8217; argument is &#8216;true&#8217; and reloads appsettings.json when it changes.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The configuration constructed in this way can be obtained with the &#8216;Configuration&#8217; property of the &#8216;context&#8217; argument in the ConfigureServices&#8217; method of the host, so register it as a configuration service to the &#8216;services&#8217; argument that was also obtained.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Use the &#8216;Microsoft.Extensions.DependencyInjection&#8217; namespace, the Options Pattern is able to use while the type specification of the &#8216;Configure&#8217; method of the service of the host that can be received by the &#8216;ConfigureServices&#8217; method of the host. This mechanism is the &#8216;IOptions&#8217; interface of the &#8216;TOptions&#8217; type of the configuration service provides Dependency Injection feature to insert customised type into the configuration service. In the time, specifying the type of the ApplicationContext class that has the same structure as the JSON file.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">App.xaml.cs
    public partial class App : Application
    {
        private IHost _host;
        public App()
        {
            _host = Host.CreateDefaultBuilder()
                .ConfigureAppConfiguration((hostingContext, configuration) =&gt;
                {
                    configuration.Sources.Clear();
                    IHostEnvironment env = hostingContext.HostingEnvironment;
                    configuration
                        .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                        .AddJsonFile($"appsettings.{env.EnvironmentName}.json", true, true);
                })
                .ConfigureServices((context, services) =&gt;
                {
                    services.Configure&lt;ApplicationContext&gt;(context.Configuration);
                    services.AddSingleton&lt;MainWindow&gt;();
                    // services.AddTransient&lt;MainWindow&gt;();
                })
                .Build();
        }
</pre>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ Application lyfecycle</div>
<p>The &#8216;AddSingleton&#8217; method of services of the Generic Host and the &#8216;AddTransient&#8217; method( commented) controls lyfecycle of the service.<br />
<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?WT.mc_id=DT-MVP-4029060&amp;view=aspnetcore-6.0#lifetime-and-registration-options" target="_new" style="font-weight:bold;" rel="noopener">The section [Lifetime and registration options] of Microsoft official document [Dependency Injection in ASP.NET Core]</a> introduces how to validate &#8216;AddTransient&#8217;, &#8216;AddScoped&#8217;, and &#8216;AddSingleton&#8217; method with an operation ID attached to the service instance.<br />
The &#8216;AddTransient&#8217; method adds a unique instance per session, the &#8216;AddScoped&#8217; method adds a per-request instance, and the &#8216;AddSingleton&#8217; method adds an application-unique service instance to the application host.<br />
In this time, the &#8216;MainWindow&#8217; service uses an instance unique to the application, but the data context and configuration service described later have a strong dependency on MainWindow, so use AddTransient when serving multiple users.</p>
</div>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Customize startup flow</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The flow up to MainWindow display can be customized by defining App.xaml and App.xaml.cs.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In App.xaml, remove the &#8216;StartupUri&#8217; attribute and specify the method name that operates at startup to the &#8216;Startup&#8217; attriute. In this example, it is &#8216;Application_Startup&#8217;, so the &#8216;Application_Startup&#8217; method create in the &#8216;App.xaml.cs&#8217; file later.  The &#8216;Application_Exit&#8217; method as the application exit method at the time of termination also create in the &#8216;App.xaml.cs&#8217; file.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Next, in order to display the &#8216;MainWindow&#8217; screen in the &#8216;Application_Startup&#8217; method of App.xaml.cs, register the &#8216;MainWindow&#8217; class as the host service in advance.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;MainWindow&#8217; class registered as a service in the host can be obtained as one of the services of host that are holded in the &#8216;_host&#8217; variable of the App class global scope in App.xaml.cs.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8220;GetRequiredService&#8221; method returns InvalidOperationException (if there is no service) or ObjectDisposedException (if the service has been destroyed), unlike &#8220;GetService&#8221; which returns null in an exception, so support flow can set in subsequent processing. Used when such operations are expected. At that time, it is the scope of the service that must be considered that described above (refer to [Application lyfecycle]).</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the &#8216;Application_Startup&#8217; method, the MainWindow screen is displayed by the &#8220;Show&#8221; method of the service that is obtained from the &#8216;GetRequiredService&#8217; method of the &#8216;_host&#8217; variable.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">App.xaml.cs
        private async void Application_Startup(object sender, StartupEventArgs e)
        {
            await _host.StartAsync();
            _host.Services.GetRequiredService<mainwindow>().Show();
        }

        private async void Application_Exit(object sender, ExitEventArgs e)
        {
            await _host.StopAsync(TimeSpan.FromSeconds(5));
            _host.Dispose();
        }
</mainwindow></pre>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Use settings values as the Options Pattern</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">To confirm startup flow, start Visual Studio Code in any folder and display the terminal with CTRL + @.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Create a project with &#8216;dotnet new wpf&#8217; command in the terminal.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">To install each extension of Microsoft.Extensions.Hosting, Microsoft.Extensions.Configuration and Microsoft.Extensions.DependencyInjection from Nuget, copy .NET CLI command below and paste it into the terminal.</p>
<div style="margin: 0px 0px 0px 20px;display:table;width:80%;">
<div style="display:table-row;">
<div style="display:table-cell;font-weight:bold;white-space: nowrap;padding-right:10px;">Microsoft.Extensions.Hosting</div>
<div style="display:table-cell;">https://www.nuget.org/packages/Microsoft.Extensions.Hosting/</div>
</div>
<div style="display:table-row;">
<div style="display:table-cell;font-weight:bold;white-space: nowrap;">Microsoft.Extensions.Configuration</div>
<div style="display:table-cell;">https://www.nuget.org/packages/Microsoft.Extensions.Configuration/</div>
</div>
<div style="display:table-row;">
<div style="display:table-cell;font-weight:bold;white-space: nowrap;">Microsoft.Extensions.DependencyInjection</div>
<div style="display:table-cell;">https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/</div>
</div>
</div>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The setting values ​​can use in all of methods of MainWindow.xaml.cs, because the configuration service of the host is stored into the variable of the global scope of the MainWindow class at the constructor of the class in this sample. Although, for convenience of explanation, every statement is defined in the constructor.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Thus that it can be used later for clicks, mouseovers, select list selections, etc. if it needs.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this article, we want to complete everything in the constructor, so binding using INotifyPropertyChanged is performed, but before explaining the ViewModel, explains the structure of using service of the host first.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Set the data context in MainWindow.xaml. Here we are using a class named &#8216;MainWindowViewModel&#8217;. Since the data context specification on the xaml side is set to Window, the property is bound as it is. Application works without the attribute &#8220;UpdateSourceTrigger=PropertyChanged&#8221;. If the data context inherits from INotifyPropertyChanged, the PropertyChangedEventHandler&#8217;s delegate is executed by default.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">MainWindow.xaml
&lt;Window x:Class="GenericHostWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:GenericHostWPF"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"&gt;
    &lt;Window.DataContext&gt;
        &lt;local:MainWindowViewModel /&gt;
    &lt;/Window.DataContext&gt;
    &lt;Grid&gt;
        &lt;TextBlock x:Name="Message" Margin="10,10,500,0" TextWrapping="Wrap" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}"
            VerticalAlignment="Top"/&gt;
        &lt;TextBox x:Name="MessageArea" HorizontalAlignment="Left" Height="312" Margin="12,100,12,12" TextWrapping="Wrap" Text="{Binding Log}"
            VerticalAlignment="Top" Width="773" Background="Black" Foreground="White"/&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Store this in the global scope variable &#8216;datacontext&#8217; of the class in the constructor of MainWindow.xaml.cs and put the setting value into the property of this view model.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">For the setting value, bind the Japanese section of the &#8216;config&#8217; argument obtained in the constructor to the global scope variable &#8216;applicationContext&#8217; so that it can be used in other methods.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;applicationContext&#8217; variable provides layered properties using the property &#8216;Brand&#8217; or the &#8216;Title&#8217; property of each &#8216;Page&#8217; object and so on.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">MainWindow.xaml.cs
    public partial class MainWindow : Window
    {
        private MainWindowViewModel dataContext = new ();
        private ApplicationContext applicationContext = new();
        private IConfiguration configRoot;
        public MainWindow(IConfiguration config)
        {
            configRoot = config;
            InitializeComponent();
            config.GetSection(ApplicationContext.English).Bind(applicationContext);
            dataContext = (MainWindowViewModel)this.DataContext;
            dataContext.Message = applicationContext.Brand;
            dataContext.Log = applicationContext.Pages.First().Title;
        }
    }
</pre>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ INotification in a ViewModel</div>
<div style="display:inline-block;width:50%;vertical-align:middle;"><img decoding="async" src="/wp-content/uploads/2022/08/viewmodel.png" alt="" style="width:450px;margin-top:10px;"></div>
<div style="display:inline-block;width:40%;mergin-left:10px;">On the ViewModel side, extend INotifyPropertyChanged to declare a delegate for PropertyChangedEventHandler and define the delegate&#8217;s methods. Since the &#8216;CallerMemberName&#8217; attribute is used in the method, the &#8216;System.Runtime.CompilerServices&#8217; namespace is used.<br />
Each property stores a value in a private variable and takes it out. If the value is the same, do nothing and call the delegate&#8217;s method if there is a change.</div>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2022/08/18/net-core-options-pattern/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

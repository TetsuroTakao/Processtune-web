<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Service &#8211; Processtune Blog</title>
	<atom:link href="https://blog.processtune.com/category/asp-net-core/service/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.processtune.com/</link>
	<description>Articles offered from Microsoft MVP</description>
	<lastBuildDate>Mon, 27 Mar 2023 03:59:53 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.8.2</generator>

<image>
	<url>/wp-content/uploads/2023/03/cropped-Presentation-32x32.png</url>
	<title>Service &#8211; Processtune Blog</title>
	<link>https://blog.processtune.com/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Encapsulation of information affects an app flexibility &#8211; ASP.NET Core Options Pattern</title>
		<link>https://blog.processtune.com/2022/07/23/encapsulation-of-information-affects-an-app-flexibility-asp-net-core-options-pattern/</link>
					<comments>https://blog.processtune.com/2022/07/23/encapsulation-of-information-affects-an-app-flexibility-asp-net-core-options-pattern/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Sat, 23 Jul 2022 02:47:41 +0000</pubDate>
				<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Service]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6478</guid>

					<description><![CDATA[Previous article [ASP.NET Core Options Pattern] describes overview of ASP.NET Core Options Pattern that enables information encapsulation and separation of business logic interest. This feature makes that an application extends some features without affecting existing features. This article using previous sample code to describe a process of extending feature with ASP.NET Core Options Pattern. Please [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"="">Previous article [<a href="https://blog.processtune.com/?p=6364" target="_new" style="font-weight:bold;" rel="noopener">ASP.NET Core Options Pattern</a>] describes overview of <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?WT.mc_id=DT-MVP-4029060&amp;view=aspnetcore-6.0" target="_new" style="font-weight:bold;" rel="noopener">ASP.NET Core Options Pattern</a> that enables information encapsulation and separation of business logic interest. This feature makes that an application extends some features without affecting existing features.<br />
This article using previous sample code to describe a process of extending feature with <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?WT.mc_id=DT-MVP-4029060&amp;view=aspnetcore-6.0" target="_new" style="font-weight:bold;" rel="noopener">ASP.NET Core Options Pattern</a>.<br />
Please select the link [<a href="https://github.com/TetsuroTakao/GlobalizationUseSettings" target="_new" style="font-weight:bold;" rel="noopener">Sample project of previous article</a>] below to download it to refer to code of this article.</p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/GlobalizationUseSettings" target="_new" style="font-weight:bold;" rel="noopener">Sample project of previous article</a></p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/GlobalizationUseSettings3" target="_new" style="font-weight:bold;" rel="noopener">Sample project of this article</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;Preparation of this article</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In previous article, did not describe steps of implementation, but describe overview of process of development. So, this article describes extending application using the Options Pattern with steps of implementation.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The sample of implementation uses the &#8216;appsettings.json&#8217; file as a settings that includes two sections of languages the &#8216;English&#8217; section and the &#8216;Japanese&#8217; section create screens of an application. This article describes that adding an item of the sections of settings does not affect to another section of the settings.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">As concretely, a navigation menu of sample application is created from the settings. Even if adding menu item of the navigation menu in the English screen does not affect to the Japanese screen.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">As the screen that navigate from the &#8216;Index&#8217; screen, this sample includes the &#8216;Search&#8217; screen made from the &#8216;Search.cshtml&#8217; file and the &#8216;Search.cshtml.cs&#8217; file of the &#8216;Pages&#8217; folder.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Implementation steps are <span style="font-weight:bold;">1.</span> Create .NET &#8216;webapp&#8217; project, <span style="font-weight:bold;">2.</span> Prepare settings JSON, <span style="font-weight:bold;">3.</span> Prepare a class that has same structure as settings JSON to use the Options Pattern, <span style="font-weight:bold;">4.</span> Add configuration service to the host using <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/generic-host?WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">the Generic Host feature of .NET</a>, the service has same structure as settings JSON, because the Options Pattern creates a service that uses the class that made at step [3] as <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection?WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">DI (Dependency Injection)</a>, <span style="font-weight:bold;">5.</span> Use the settings values through the service at each controller (or non-MVC Razor pages).</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">•&nbsp;Create .NET ‘webapp’ project - Step 1
&gt;Start Visual Studio Code ([code .] at any directory to create the project in Windows terminal)
&gt;Open the terminal window in Visual Studio Code (Press [CTRL + @] in terminal pain)
&gt;Create new 'webapp' project(Put [dotnet new webapp] in terminal pain)
•&nbsp;Prepare settings JSON - Step 2
&gt;Copy from the Sample project, or type below in appsettings.json of the project

[%project root directory%\appsettings.json]
{
  "Japanese": {
    "Brand": "管理画面",
    "Pages": [
      {
        "ActionKey": "Index",
        "Title": "ホーム"
      },
      {
        "ActionKey": "Privacy",
        "Title": "個人情報"
      }
    ]
  },
  "English": {
    "Brand": "Management Console",
    "Pages": [
      {
        "ActionKey": "Index",
        "Title": "Home"
      },
      {
        "ActionKey": "Privacy",
        "Title": "Privacy"
     }
    ]
  }
}
</pre>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;A class that has same structure as settings JSON &#8211; Step 3</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;appsettings.json&#8217; file has the &#8216;Japanese&#8217; section and the &#8216;English&#8217; section, the Options Pattern represents it as constant string. The &#8216;ApplicationContext&#8217; class below provides two objects that identifyed using name &#8216;English&#8217; and &#8216;Japanese&#8217;, each object has the &#8216;Brand&#8217; property, and the &#8216;Pages&#8217; property that is collection of the &#8216;Page&#8217; object which has the &#8216;ActionKey &#8216; property and the &#8216;Title&#8217; property.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">This procedure for specification is the Options Pattern specific that reduces same statement of the class to define same structure. Please compare the &#8216;appsettings.json&#8217; above and the &#8216;ApplicationContext&#8217; class below.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">[%project root directory%\Models\ApplicationContext.cs]
public class ApplicationContext {
    public const string Japanese = "Japanese";
    public const string English = "English";
    public string Brand{ get; set; } = String.Empty;
    public List<page> Pages{ get; set; } = new List<page>();
}

public class Page {
    public string ActionKey { get; set; } = String.Empty;
    public string Title { get; set; } = String.Empty;
}
</page></page></pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;ApplicationContext&#8217; class as the &#8216;ApplicationContext.cs&#8217; file create in the &#8216;Models&#8217; folder that create new at the project.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep1.png" alt="" style="width:450px;"></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;Add configuration service to the host &#8211; Step 4</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the &#8216;Program.cs&#8217; file of the project root, adds statement &#8216;builder.Services.Configure<applicationcontext>(builder.Configuration.GetSection(&#8220;Japanese&#8221;));&#8217; at before the statement &#8216;var app = builder.Build();&#8217;. This statement provides a service that is structed as the &#8216;ApplicationContext&#8217; type, includes settings value.</applicationcontext></p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">[%project root directory%\Program.cs]
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddRazorPages();
// Add this code
builder.Services.Configure<applicationcontext>(builder.Configuration);
// Only this one code
var app = builder.Build();
if (!app.Environment.IsDevelopment())...
...
app.Run();
</applicationcontext></pre>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;Use the settings values at each controller (or non MVC razor pages) &#8211; Step 5</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Each method of a Controller if MVC, or OnGet method of the Razor pages if it&#8217;s not MVC could provides settings values to client UI.<br />
Sample is non MVC Razor page, so move to Pages directory using [cd pages] command in the &#8216;terminal&#8217; pain and type [dotnet new pages -na %namespace%] to add a page in Pages folder of the project, make its page able to navigate from Index in follow step. Replace the part [%namespace%] to the namespace of development environment that can copy from the &#8216;Index.cshtml.cs&#8217;.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Modify a name of the model &#8216;PagesModel&#8217; to &#8216;SearchModel&#8217; in the &#8216;Pages.cshtml&#8217; file, and file name to &#8216;Search.cshtml&#8217;. And modify class name &#8216;PagesModel&#8217; to &#8216;SearchModel&#8217; in the &#8216;Pages.cshtml.cs&#8217; and file name to &#8216;Search.cshtml.cs'(refer to the figure below left).</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Next step is modifying &#8216;Index&#8217; screen, because of this web app starts from the &#8216;Index&#8217; screen.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Put configuration service into class-scoped variable at class constructor of the &#8216;Index.cshtml.cs&#8217;, to use in OnGet method. Put settings values to ViewData at OnGet method using class-scoped variable (refer to the figure below right).</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep2.png" alt="" style="width:450px;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep3.png" alt="" style="width:450px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The &#8216;GetSection&#8217; method of configuration service provides settings value of specific section (this sample is &#8216;English&#8217; section) to bind to class-scoped variable that structed as same with the &#8216;appsettings.json&#8217;. Then put settings values in ViewData using a type, in OnGet method. Thus, this coding style is very effectively.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;width:450px;display:inline-block;vertical-align:bottom;">[%project root directory%\Pages\Index.cshtml.cs]
public SearchModel(ILogger<indexmodel> logger, IConfiguration configuration)
{
    Context = new ApplicationContext();
    configuration.GetSection(ApplicationContext.English).Bind(Context);
    // Use below code if you want show Japanese settings values.
    // configuration.GetSection(ApplicationContext.Japanese).Bind(Context);
}
public void OnGet()
{
    ViewData["Brand"] = Context.Brand;
    ViewData["Pages"] = Context.Pages;
    var current = Context.Pages.Where(p =&gt; p.ActionKey == "Index")
                    .FirstOrDefault();
    if(current != null){
        ViewData["Title"] = current.Title;
    }
}

[%project root directory%\Pages\Index.cshtml]
&lt;div class="text-center"&gt;
    &lt;h4&gt;@ViewData["Brand"]!
    &lt;div style="border:thin solid #00f;text-align:left;padding:5px;"&gt;&lt;/div&gt;
&lt;/div&gt;
</indexmodel></pre>
<p style="display:inline-block;margin-bottom:10px;text-align:center;display:inline-block;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep4.png" alt="" style="width:450px;"></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;Navigate from Index to Search</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Definition in the &#8216;Index.cshtml.cs&#8217; file is lost affect when navigate to the &#8216;Search&#8217; screen, thus definition like this has to set to global scope of application. For it, create new file &#8216;PageBase.cs&#8217; at the &#8216;Shared&#8217; folder of the &#8216;Pages&#8217; folder of project root, then copy all code of the &#8216;Index.cshtml.cs&#8217; file to it. After it, modify as below code. Let literal code &#8216;Index&#8217; that represents current screen as it is, only modify &#8216;IndexModel&#8217; to &#8216;PageBaseModel&#8217; here.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">[%project root directory%\Pages\Shared\PageBase.cs]
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace GlobalizationUseSettings3.Pages
{
    // public class IndexModel:PageModel
    public class PageBaseModel:PageModel
    {
        private readonly ILogger<pagebasemodel> _logger;
        private readonly ApplicationContext Context;

        // public IndexModel(ILogger&lt;IndexModel&gt; logger, IConfiguration configuration, string language)
        public PageBaseModel(ILogger&lt;PageBaseModel&gt; logger, IConfiguration configuration)
        {
            _logger = logger;
            Context = new ApplicationContext();
            configuration.GetSection(language).Bind(Context);
       }

        public void OnGet()
        {
            ViewData["Brand"] = Context.Brand;
            ViewData["Pages"] = Context.Pages;
            var current = Context.Pages.Where(p =&gt; p.ActionKey == "Index").FirstOrDefault();
            if(current != null){
                ViewData["Title"] = current.Title;
            }
        }
    }
}
</pagebasemodel></pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the &#8216;Index.cshtml.cs&#8217; file, modify the &#8216;IndexModel&#8217; class that is extend of the &#8216;PageModel&#8217; class to extend of the &#8216;PageBaseModel&#8217; class as below code. And let&#8217;s change the screen language to Japanese in this time.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;width:450px;display:inline-block;vertical-align:bottom;">[%project root directory%\Pages\Index.cshtml.cs]
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace GlobalizationUseSettings3.Pages;

// public class IndexModel : PageModel
public class IndexModel : PageBaseModel
{
    // private readonly ILogger<indexmodel> _logger;
    // private readonly ApplicationContext Context;

    // public IndexModel(ILogger<indexmodel> logger, IConfiguration configuration)
    public IndexModel(ILogger<indexmodel> logger, IConfiguration configuration)
                : base(logger, configuration, ApplicationContext.Japanese)
    {
        // _logger = logger;
        // Context = new ApplicationContext();
        // configuration.GetSection(ApplicationContext.English).Bind(Context);
    }

    // public void OnGet()
    // {
    //     ViewData["Brand"] = Context.Brand;
    //     ViewData["Pages"] = Context.Pages;
    //     var current = Context.Pages.Where(p =&gt; p.ActionKey == "Index").FirstOrDefault();
    //     if(current != null){
    //         ViewData["Title"] = current.Title;
    //     }
    // }
}
</indexmodel></indexmodel></indexmodel></pre>
<p style="display:inline-block;margin-bottom:10px;text-align:center;display:inline-block;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep5.png" alt="" style="width:450px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Next step is control of the current page title and adding navigation menu item for the &#8216;Search&#8217; screen.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">To obtain current screen, get the &#8216;HttpContext&#8217; object of HTTP request and get values of the &#8216;RouteData&#8217; object of the &#8216;HttpContext&#8217; object. This &#8216;RouteData&#8217; object includes URL address string as relatively of current screen. On the other hands, strings for title of screens set in the &#8216;appsettings.json&#8217; file is mapped to the &#8216;ApplicationContext&#8217; class. Thus the &#8216;Title&#8217; property of the &#8216;Page&#8217; object use for current screen is able to identify in the &#8216;Pages&#8217; collection of the &#8216;ApplicationContext&#8217; class if acquired URL address string match to the &#8216;ActionKey&#8217; property of the &#8216;Page&#8217; object. Delete &#8216;/&#8217; string to compare acquired URL address string with  the &#8216;ActionKey&#8217; property of the &#8216;Page&#8217; object use the &#8216;RegularExpression&#8217; object.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Modify the &#8216;OnGet()&#8217; method of the &#8216;PageBase.cs&#8217; file like as below code.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">[%project root directory%\Pages\Shared\PageBase.cs]
using System.Text.RegularExpressions;
...
        public void OnGet()
        {
            ViewData["Brand"] = Context.Brand;
            ViewData["Pages"] = Context.Pages;
            // var current = Context.Pages.Where(p =&gt; p.ActionKey == "Index").FirstOrDefault();
            // if(current != null){
            //     ViewData["Title"] = current.Title;
            // }
            var p = Request.HttpContext.GetRouteData()!.Values["Page"]!.ToString();
            var rx = new Regex(@"\w.*",RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var m = rx.Matches(p!).FirstOrDefault()!.Value;
            ViewData["Title"] = Context.Pages.Where(p =&gt; p.ActionKey == m).FirstOrDefault()!.Title;
        }
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Last step of navigate to the &#8216;Search&#8217; scree is Modify the &#8216;_Layout.cshtml&#8217; file to create navigation menu item for &#8216;Search&#8217; screen.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Like as a title of current screen, This menu item is also created from the &#8216;Page&#8217; object defined in the &#8216;ApplicationContext&#8217; class. The &#8216;Page&#8217; class has the &#8216;ActionKey&#8217; property and the &#8216;Title&#8217; property, use this &#8216;ActionKey&#8217;, set at the &#8216;asp-page-handler&#8217; attribute of HTML anchor tag as the URI of the &#8216;Search&#8217; screen.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">&lt;a class="nav-link text-dark" asp-page="@item.ActionKey"&gt;@item.Title&lt;/a&gt;
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Settings values set to the &#8216;Pages&#8217; of ViewData in constructor of the &#8216;PageBase&#8217; class are collection of a pair the &#8216;ActionKey&#8217; property and the &#8216;Title&#8217; property. Thus, modify the &#8216;_Layout.cshtml&#8217; file as below code creates list items of HTML unordered list tag.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">&lt;ul class="navbar-nav flex-grow-1"&gt;
    @* &lt;li class="nav-item"&gt;
        &lt;a class="nav-link text-dark" asp-area="" asp-page="/Index"&gt;Home&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
        &lt;a class="nav-link text-dark" asp-area="" asp-page="/Privacy"&gt;Privacy&lt;/a&gt;
    &lt;/li&gt; *@
    @foreach (var item in pages!)
    {
        &lt;li class="nav-item"&gt;
            @if(ViewData["Title"]!.ToString()==item.Title) {
                &lt;span style="padding:.5rem;display:inline-block;"&gt;@item.Title&lt;/span&gt;
            }
            else{
                &lt;a class="nav-link text-dark" asp-page="@item.ActionKey"&gt;@item.Title&lt;/a&gt;
            }
        &lt;/li&gt;
    }
&lt;/ul&gt;
</pre>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this mechanism, modifying the &#8216;appsettings.json&#8217; file changes navigate menu immediately. Add &#8216;Search&#8217; page settings only in the &#8216;English&#8217; section, it does not affect to the &#8216;Japanese&#8217; section.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;display:inline-block;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep6.png" alt="" style="width:300px;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep7.png" alt="" style="width:300px;"><img decoding="async" src="/wp-content/uploads/2022/08/ImplementationStep5.png" alt="" style="width:300px;"></p>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ Recommended Reference</div>
<p><a href="https://blog.processtune.com/?p=6428" target="_new" style="font-weight:bold;" rel="noopener">.NET Core Options pattern</a><br />
<a href="https://blog.processtune.com/?p=6364" target="_new" style="font-weight:bold;" rel="noopener">ASP.NET Core Options Pattern</a></p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2022/07/23/encapsulation-of-information-affects-an-app-flexibility-asp-net-core-options-pattern/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASP.NET Core Options Pattern</title>
		<link>https://blog.processtune.com/2022/06/28/asp-net-core-options-pattern/</link>
					<comments>https://blog.processtune.com/2022/06/28/asp-net-core-options-pattern/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Tue, 28 Jun 2022 07:43:10 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Service]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6364</guid>

					<description><![CDATA[A typical web application separates setting from the App. In the ASP .NET Core web app allows encapsulation and separation of an interest of setting using the options pattern. It allows enables continuous integration while improving maintainability of an application. This article describes as an introduce of the ASP.NET Core Options Pattern using globalization sample. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"="">A typical web application separates setting from the App. In the ASP .NET Core web app allows encapsulation and separation of an interest of setting using the options pattern. It allows enables continuous integration while improving maintainability of an application.<br />
This article describes as an introduce of the ASP.NET Core Options Pattern using globalization sample.<br />
For globalization of ASP .NET Core samples using &#8216;.resx&#8217; files are <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization?view=aspnetcore-6.0&amp;WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">ideal pattern</a>. These samples are created, edited, debugged, and continuously managed in Visual Studio, so users who aren&#8217;t using Visual Studio can use tools such as the online xml converter to get &#8216;.resx&#8217; files.<br />
If your development environment for productions that support many languages, I recommend that you do so, but if you create an application that supports a few languages such as just only Japanese and English, or lightweight web application such as PoC, demo or sample code. These apps globalize only few words, so It is useful that globalization using the options pattern without adopting full-scale globalization using &#8216;.resx&#8217; files.</p>
<p style="margin:10px 0px 0px 5px;text-indent:1em;text-align:right;font-weight:bold;">&gt;&gt;<a href="https://github.com/TetsuroTakao/GlobalizationUseSettings" target="_new" style="font-weight:bold;" rel="noopener">Code sample of this article</a></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Overview</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The way of separating ASP.NET settings from app hasn&#8217;t changed with the way of existing. Each method can use defined the setting value in the JSON file after registering the service on the host of the application.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In the case of ASP.NET MVC, if you register the service of the setting value in the host created by CreateBuilder, you can store the service received by the constructor of the controller in the variable defined globally in the scope of the controller, so can use settings variable in POST or GET method. You can use that variable in the processing of the request.</p>
<pre style="background-color:#cccccc;border:1px solid #00000; padding: 10px;">[Program.cs]
builder.Services.Configure&lt;ApplicationContext&gt;(builder.Configuration);

[Pages/Search.cshtml.cs]
    public class SearchModel : PageModel
    {
        private readonly ApplicationContext Context;
        public SearchModel(ILogger&lt;IndexModel&gt; logger, IConfiguration configuration)
        {
            Context = new ApplicationContext();
            Context.Languages.Add(ApplicationContext.English);
            configuration.GetSection(ApplicationContext.Japanese).Bind(Context);
       }

        public void OnGet()
        {
            ViewData["Message"] = Context.Languages.Count;
...
        }
    }
</pre>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ As additional information</div>
<p>At that time, if the setting values ​​are separated using the options pattern, maintainable encapsulation can be performed. You can encapsulate by below.<br />
1. The settings for individual methods or controllers, respectively.<br />
2. At the level of &#8220;system&#8221; and &#8220;business&#8221; information such as logs and IP whitelists.<br />
3. Semantics of settings.<br />
4. more &#8230;</p>
</div>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Often In the Domain Driven Design, the same thing is called by deferent name depending on boundary context on the scene in which it is used. When you purchase some product, what is displayed as &#8220;payment&#8221; in the member&#8217;s app is displayed as &#8220;sales&#8221; in the sales management system. It is OK that use deferent letteral objects on each individual systems if it mapped deferent labels by an individual system of a legacy system. It is important that using deferent settings value to handle same object of stateful middleware on deferent service in a modern system.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">Thus, it can be said that the value of the settings handled in each boundary context with several same attributes are different when design settings elements.</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">・Implementation</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this article, the reason of using an implementation example of globalization is for describing the example of &#8220;Continuous integration of applications that read different setting values ​​while having the same attributes&#8221; to express the features of the options pattern.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2022/06/StepsOfTakingConfiguration.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">In this article, the reason of using an implementation example of globalization is for describing the example of &#8220;Continuous integration of applications that read different setting values ​​while having the same attributes&#8221; to express the features of the options pattern.</p>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;text-indent:1em;"><span style="font-size:2rem;font-family: 'Arial';">At first</span>, prepare Japanese and English sections in the appsettings.json, and it has brand name and the Pages segment. The segment has an action names as the ActionKey and a page titles as the Title.</div>
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/Appsettings.png" alt="" style="width:180px;vertical-align:top;mergin left:10px;"></div>
</div>
</div>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/ApplicationContext.png" alt="" style="width:450px;vertical-align:top;margin-right:10px;"></div>
<div style="display:table-cell;text-indent:1em;margin-left:10px;"><span style="font-size:2rem;font-family: 'Arial';">Next</span>, prepare a class with the same structure as the JSON file used for the configuration service registration for application builder.<br />
Add the ApplicationContext.cs to the project, I recommend that adding the Models folder in the project at first, then input the ApplicationContext.cs into it.<br />
One of the features of the ASP.NET options pattern is that defined const is name of the object and ignore it as structure of the object. Thus, this const can be used when get certain section of configuration service without hard coding &#8216;Japanese&#8217; or &#8216;English&#8217;.</div>
</div>
</div>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;text-indent:1em;"><span style="font-size:2rem;font-family: 'Arial';">Then</span>, Register target section of the builder configuration as the configuration service with the type same as certain section of appsettings.json.</div>
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/RegisterService.png" alt="" style="width:450px;vertical-align:top;mergin left:10px;"></div>
</div>
</div>
<div style="margin: 20px 0px 0px 0px;display:table;">
<div style="display:table-row;">
<div style="display:table-cell;"><img decoding="async" src="/wp-content/uploads/2022/06/UsingConfigurationService.png" alt="" style="width:450px;vertical-align:top;margin-right:10px;"></div>
<div style="display:table-cell;text-indent:1em;"><span style="font-size:2rem;font-family: 'Arial';">Since</span> the setting value registered as configuration service can be received by the argument of the constructor, store it in a variable at the global level scope of the class. It can use in individual method of the class, respectively.</div>
</div>
</div>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ As additional information</div>
<p>I&#8217;m using the ViewData object because I needed to layer the objects when separating the options pattern. When using the options pattern as a mere encapsulation, the ViewBag object may be sufficient, as it is a set of parallel key / value combinations without grouped hierarchies.</p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2022/06/28/asp-net-core-options-pattern/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Design of solution with gRPC communication</title>
		<link>https://blog.processtune.com/2022/04/30/design-of-solution-with-grpc-communication/</link>
					<comments>https://blog.processtune.com/2022/04/30/design-of-solution-with-grpc-communication/#respond</comments>
		
		<dc:creator><![CDATA[tetsuro.takao]]></dc:creator>
		<pubDate>Sat, 30 Apr 2022 08:29:32 +0000</pubDate>
				<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[gRPC]]></category>
		<category><![CDATA[Service]]></category>
		<category><![CDATA[SlideShow]]></category>
		<category><![CDATA[Technical Memo]]></category>
		<guid isPermaLink="false">https://blog.processtune.com/?p=6651</guid>

					<description><![CDATA[The gRPC is one of the Remote Procedure Call (RPC), It was developed by Google. They needed a messaging protocol that can respond on the distributed computing environment in real-time when users operate the Data plane of the Google Cloud. And it was leveraged for maintaining of the Control plane of Google Cloud also, to [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="margin:0px 0px 0px 0px;color:#000044;font-size:0.9rem;font-family:" segoe="" ui";"=""><a href="https://github.com/grpc" target="_new" style="font-weight:bold;" rel="noopener">The gRPC</a> is one of the <a href="https://en.wikipedia.org/wiki/Remote_procedure_call" target="_new" style="font-weight:bold;" rel="noopener">Remote Procedure Call (RPC)</a>, It was developed by Google. They needed a messaging protocol that can respond on the distributed computing environment in real-time when users operate <a href="https://www.cloudflare.com/learning/network-layer/what-is-the-control-plane/" target="_new" style="font-weight:bold;" rel="noopener">the Data plane</a> of the Google Cloud. And it was leveraged for maintaining of the Control plane of Google Cloud also, to keep high quality cloud services.<br />
The gRPC uses <a href="https://cloud.google.com/blog/products/gcp/grpc-a-true-internet-scale-rpc-framework-is-now-1-and-ready-for-production-deployments?hl=en" target="_new" style="font-weight:bold;" rel="noopener">the Stubby</a> they created: a framework of one of the RPC. Then the gRPC become to open source, and it has be the incubating project of <a href="https://www.cncf.io/" target="_new" style="font-weight:bold;" rel="noopener">CNCF</a> since 2017.<br />
Microsoft supports many development environments for an application using the gRPC-Web and the gRPC-over-HTTP/2 (see Microsoft official document &#8216;<a href="https://docs.microsoft.com/ja-jp/aspnet/core/grpc/supported-platforms?view=aspnetcore-6.0&amp;WT.mc_id=DT-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">gRPC on .NET supported platforms</a>&#8216;).<br />
This article describe mechanism of .NET application using the gRPC architecture and an application that uses the gRPC works as the Message Oriented Middleware.<br />
The article &#8216;<a href="https://blog.processtune.com/?p=6649" target="_new" style="font-weight:bold;" rel="noopener">ASP.NET Core gRPC &amp; gRPCurl tool</a>&#8216; describes how to implement gRPC application service from Azure App Service.</p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;gRPC-dotnet</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The gRPC-dotnet is implementation of .NET that is to use the <a href="https://grpc.io/blog/grpc-stacks/" target="_new" style="font-weight:bold;" rel="noopener">gRPC Core Stack</a>. It&#8217;s structed with namespaces of <a href="https://www.nuget.org/packages/Grpc.AspNetCore" target="_new" style="font-weight:bold;" rel="noopener">Grpc.AspNetCore</a> and <a href="https://www.nuget.org/packages/Grpc.AspNetCore.Server.Reflection" target="_new" style="font-weight:bold;" rel="noopener">Grpc.AspNetCore.Server.Reflection</a>. For creation of these stub, namespaces <a href="https://www.nuget.org/packages/Grpc.Net.Client" target="_new" style="font-weight:bold;" rel="noopener">Grpc.Net.Client</a>, <a href="https://www.nuget.org/packages/Grpc.Tools/2.51.0" target="_new" style="font-weight:bold;" rel="noopener">Grpc.Tools</a>, and <a href="https://www.nuget.org/packages/Google.Protobuf" target="_new" style="font-weight:bold;" rel="noopener">Google.Protobuf</a> architecture are used.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The Grpc.AspNetCore namespace is the gRPC service itself, and the Grpc.AspNetCore.Server.Reflection namespace works for providing a description of the gRPC service to client apps just like the <a href="https://swagger.io/" target="_new" style="font-weight:bold;" rel="noopener">Swagger</a>.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">On the other hand, the Grpc.Tools namespace is auto generate a stub of client side that uses <a href="https://protobuf.dev/" target="_new" style="font-weight:bold;" rel="noopener">the Protobuf of the gRPC</a>. The Grpc.Tools namespace generates a stub with the Google.Protobuf architecture, The Google.Protobuf called from the Grpc.Tools namespace is pure C# implementation that does not use native component of the gRPC core stack.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">There was no HTTP/2 library of C# until gRPC-dotnet is developed, so gRPC apps of C# were developed with gRPC.Core that includes HTTP/2 library. The gRPC.Core namespace moved to the state of the Maintenance Only at May 2021, then at May 2022, it was in the state of the Deprecated (Please refer to the great article &#8216;<a href="https://grpc.io/blog/grpc-csharp-future/" target="_new" style="font-weight:bold;" rel="noopener">The future of gRPC in C# belongs to grpc-dotnet</a>&#8216;).</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2023/02/gRPC-dotnet.png" alt="" style="width:900px;"></p>
<p style="margin: 10px 0px 0px 0px; font-weight: bold; font-size: 14px;">•&nbsp;The gRPC is a protocol for the Message Oriented Middleware.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The gRPC extends the Remote Procedure Call (RPC). <a href="https://grpc.io/" target="_new" style="font-weight:bold;" rel="noopener">The official website</a> says, &#8216;A high performance, open-source universal RPC framework&#8217;.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The first description is an aspect of universal RPC framework, it can be used in multiple languages and can enforce service contracts on multiple first- and third-party services using HTTP/2. It means that the gRPC can generate clients and servers in multiple languages, generated code is able to run on each language environment (C++, Java, Go, Node, Ruby, Python and C# across Linux, Windows and Mac). The gRPC as a framework is universal because it supports also development on many environment. For instance, mobile apps development of iOS and Android is supported with Objective-C and Android Java libraries, it can execute single-line installation in most languages.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The RPC calls any functions on destination that are an object, in other words, service contracts have to describe the objects, so gRPC use the Protocol Buffers for run on universal environment. The Protocol Buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data (quote from <a href="https://protobuf.dev/" target="_new" style="font-weight:bold;" rel="noopener">the official website</a>). It can describe objects of services side and edge side both.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The second description is an aspect of high performance of the gRPC, availability of object description affects streaming or unary flow control from each side of service and edge. In the case of using the forward error correction (FEC) mechanism for error handling, it is better that an object error is supported at communication level same as a connection error instead of at an application level. An access control of authentication &amp; authorization typically uses JSON as a container of a security token, object description of the Protocol Buffers is useful for transfer of a security token too, also useful for serialization/deserialization. The RPC extends of the gRPC are also useful at other aspects such as distributed tracing, binding as synchronization/asynchronization, response of cancel/timeout, health checking, load balancing, logging and monitoring and tracing etc..</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The gRPC was developed for distributed computing. Distributed computing has the Message-Oriented Middleware, the Distributed Directory, the Service Discovery, the Stateful Middle Tier, the Stateless Actor Activator and so on. There are many types in the Message Oriented Middleware such as the Pub-Sub, the Message Queue, the Fan-out, the Request/Response, the Point to Point, the Remote Procedure Call and so forth. The Remote Procedure Call run on several type protocols like the HTTP, the HTTP/2, the TCP/IP, the Internet InterORB protocol. The gRPC is extends HTTP/2 with the Protocol Buffers. Thus, the gRPC has to be used in correct situation, in other words, what kind of a solution architecture, what part of the system or which direction of procedures call.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2023/02/gRPCInDistributedComputing.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The gRPC is like as the WCF or the DCOM that uses the Distributed Object in synchronize communication although, it can communicate asynchronously, and also can bidirectional communication between service and client because it transfer objects with the HTT/2 protocol.</p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">The Distributed Object of unary RPC makes a stub of a service side object on a client side, then a client executes a client-side object. In other hand, the gRPC transfers a description of service side object, then a client side calls service side procedure.</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2023/02/gRPCommunicationDirection.png" alt="" style="width:900px;"></p>
<p style="margin: 0px 0px 0px 0px;text-indent:1em;">If you familiar with synchronize communication on the DCOM or the WCF architecture, aware consistency of a state of services on the gRPC communication. In the case of a unary RPC, a client-side application uses same object of service side as stub, thus typically the application care about consistency of only service side state although, in contrast a state of client side or service side is not guaranteed on the gRPC communication because the gRPC communication uses remotely individual object of service side or client side and usually communicate with asynchronously. Though the gRPC can communicate as synchronously for waiting remote procedure response like unary RPC, if use the Backend for Frontends pattern for design of cloud native solution, it needs design as distributed computing like Microservices. Please refer to the website of Sam Newman (&#8216;<a href="https://samnewman.io/patterns/architectural/bff/" target="_new" style="font-weight:bold;" rel="noopener">Pattern: Backends For Frontends</a>&#8216;), and Microsoft official document (&#8216;<a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends?WT.mc_id=AZ-MVP-4029060" target="_new" style="font-weight:bold;" rel="noopener">Backends for Frontends pattern: Microsoft learn</a>&#8216;).</p>
<p style="display:inline-block;margin-bottom:10px;text-align:center;width:100%;"><img decoding="async" src="/wp-content/uploads/2023/02/BackendForFrontends.png" alt="" style="width:900px;"></p>
<div style="background-color:#cccccc;border:1px solid #00000; padding: 10px 10px 0px 10px;margin-top:20px;">
<div style="margin:-20px 0px 0px 5px;text-indent:1em;font-weight:bold;background-color:#444;border:1px solid #ccc;color:#fff;">ⓘ Recomended reference</div>
<p><a href="https://blog.processtune.com/?p=6649" target="_new" style="font-weight:bold;display:inline-block;margin-left:1rem;margin-top:1rem;margin-bottom:1rem;" rel="noopener">→ASP.NET Core gRPC &amp; gRPCurl tool</a></p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.processtune.com/2022/04/30/design-of-solution-with-grpc-communication/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
